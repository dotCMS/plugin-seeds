import java.util.jar.JarFile

plugins {
    id 'biz.aQute.bnd.builder' version '3.3.0'
}

sourceCompatibility = '1.8'

group 'com.dotcms.aop'
version '0.2'


repositories {
    maven {
        url "http://repo.dotcms.com/artifactory/libs-release"
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'osgi'
apply plugin: 'war'
apply plugin: 'eclipse'

compileJava.enabled = false;

project.ext {
    aspectjVersion = '1.8.10'
}

configurations {
    ajc
    provided
    aspects
    ajInpath
}

task compileAjc(overwrite: true) {

    // Declare the output directory to enable uptodate checks
    outputs.dir sourceSets.main.output.classesDir

    doLast{
        // Resolve the AspectJ compiler via dependencies of the ajc configuration
        ant.taskdef( resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
        ant.iajc(source:"1.8", target:"1.8",
                destDir:sourceSets.main.output.classesDir,
                maxmem:"512m",
                fork:"true",
                // Jars containing aspects to be woven should be declared in the aspects configuration
                aspectPath:configurations.aspects?.asPath,
                // Jars containing classes where aspects should be woven into should be declared in the ajInpath configuration
                inpath:configurations.ajInpath?.asPath,
                // Define the compile classpath to include a deps of a 'provided' configuration
                classpath:configurations.compile.asPath + configurations.provided.asPath){

            sourceroots{
                sourceSets.main.java.srcDirs.each{
                    // The aspectJ compiler does not like nonexisting source roots, so check if they exist
                    if (it.exists()) {
                        pathelement(location:it.absolutePath)
                    }
                }
            }

        }
    }
}

// Link the compileAjc task into the dependency chain
processResources.dependsOn(compileAjc)

dependencies {

    ajc     "org.aspectj:aspectjtools:1.8.10"
    providedCompile "org.aspectj:aspectjrt:1.8.10"
    providedCompile (group: 'com.dotcms', name: 'dotcms', version: '5.3.9'){
        transitive = true
    }
    aspects (group: 'com.dotcms', name: 'dotcms', version: '5.3.9')

    providedCompile "javax.servlet:javax.servlet-api:3.1.0"
}

import java.util.jar.*

/////////////////////////
//Plugin jar
/////////////////////////
jar {
    manifest {
        name = 'Osgi AOP class'
        instruction 'Bundle-Vendor', 'dotcms'
        instruction 'Bundle-Description', 'dotCMS - Osgi AOP class example'
        instruction 'Bundle-DocURL', 'http://www.dotcms.com'
        instruction 'Bundle-Activator', 'com.dotcms.plugin.aop.Activator'
        instruction 'Import-Package', 'com.dotcms.plugin.aop.rest.*,' +
                '*;version=0'
    }
}

jar.finalizedBy 'fragmentJar'

/////////////////////////
//Fragment jar
/////////////////////////

ext {
    bundleName = "dotCMS AOP class fragment"
    bundleDescription = "dotCMS - Osgi AOP class fragment"
    fragmentHost = "system.bundle; extension:=framework"
    bundleSymbolicName = "" //Auto generated based on the plugin jar
    bundleVersion = "" //Auto generated based on the plugin jar
    importPackage = "" //Auto generated based on the plugin jar
    bundleManifestVersion = "" //Auto generated based on the plugin jar
    bundleDocURL = "" //Auto generated based on the plugin jar
    bundleVendor = "" //Auto generated based on the plugin jar
}
/**
 * The import generates versions like this: version="[1.8,2)"
 * That format does not work for the export, so we need to replace it
 * to: version=0
 */
ext.fixVersionNumber = {importValue ->
    return importValue.replaceAll("\"\\[[0-9.,]+\\)\"", "0")
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifesttAttributes {
    doFirst {
        File file = configurations.baseline.singleFile
        JarFile jar = new JarFile(file)
        Attributes manifest = jar.getManifest().getMainAttributes()
        bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
        bundleVersion = "${manifest.getValue('Bundle-Version')}"
        importPackage = "${manifest.getValue('Import-Package')}"
        bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
        bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
        bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
    }
}
task fragmentJar(type: Jar) {

    doFirst {
        //Setting the fragment jar name
        baseName = project.name
        archiveName = "${baseName}.fragment-${version}.jar"
        importPackage = fixVersionNumber(importPackage)

        manifest {
            attributes (
                    'Bundle-Name': "${bundleName}",
                    'Bundle-Description': "${bundleDescription}",
                    'Bundle-Vendor': "${bundleVendor}",
                    'Bundle-Version': "${version}",
                    'Bundle-SymbolicName': "${baseName}.fragment",
                    'Bundle-ManifestVersion': "${bundleManifestVersion}",
                    'Bundle-DocURL': "${bundleDocURL}",
                    'Fragment-Host': "${fragmentHost}",
                    'Export-Package': "${importPackage}"
            )
        }
    }
}
fragmentJar.dependsOn 'readManifesttAttributes'

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}
