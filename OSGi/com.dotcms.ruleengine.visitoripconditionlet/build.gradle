plugins {
    id 'biz.aQute.bnd.builder' version '3.3.0'
}

sourceCompatibility = '1.8'
version = '0.2'

repositories {
    maven { url "http://repo.dotcms.com/artifactory/libs-release" }
}

configurations {
    provided
    provided.extendsFrom(compile)
}

dependencies {
    compile('com.dotcms:dotcms:5.3.9') { transitive = true }

    testCompile 'org.mockito:mockito-core:2.0.31-beta'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile('org.testng:testng:6.9.6') {
        exclude(group: 'org.hamcrest')

    }
}

/* To compile we must add the additional configuration we created to our classpaths. */
sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()
    /* enabling standard streams allows us to see test failures and related stack traces in the console. */
    testLogging.showStandardStreams = true
}

import java.util.jar.*

/////////////////////////
//Plugin jar
/////////////////////////
jar {
    manifest {
        attributes (
                'Bundle-Vendor': 'dotCMS',
                'Bundle-Description': 'dotCMS - OSGI Visitor IP Conditionlet',
                'Bundle-DocURL': 'https://dotcms.com/',
                'Bundle-Activator': 'com.dotmarketing.osgi.ruleengine.conditionlet.Activator',
                'Import-Package': '*;version=0'
        )
    }
}
jar.dependsOn test
jar.finalizedBy 'fragmentJar'

/////////////////////////
//Fragment jar
/////////////////////////

ext {
    bundleName = "OSGI Visitor IP Conditionlet fragment"
    bundleDescription = "dotCMS - OSGI Visitor IP Conditionlet fragment"
    fragmentHost = "system.bundle; extension:=framework"
    bundleSymbolicName = "" //Auto generated based on the plugin jar
    bundleVersion = "" //Auto generated based on the plugin jar
    importPackage = "" //Auto generated based on the plugin jar
    bundleManifestVersion = "" //Auto generated based on the plugin jar
    bundleDocURL = "" //Auto generated based on the plugin jar
    bundleVendor = "" //Auto generated based on the plugin jar
}
/**
 * The import generates versions like this: version="[1.8,2)"
 * That format does not work for the export, so we need to replace it
 * to: version=0
 */
ext.fixVersionNumber = {importValue ->
    return importValue.replaceAll("\"\\[[0-9.,]+\\)\"", "0")
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifesttAttributes {
    doFirst {
        File file = configurations.baseline.singleFile
        JarFile jar = new JarFile(file)
        Attributes manifest = jar.getManifest().getMainAttributes()
        bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
        bundleVersion = "${manifest.getValue('Bundle-Version')}"
        importPackage = "${manifest.getValue('Import-Package')}"
        bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
        bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
        bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
    }
}
task fragmentJar(type: Jar) {

    doFirst {
        //Setting the fragment jar name
        baseName = project.name
        archiveName = "${baseName}.fragment-${version}.jar"
        importPackage = fixVersionNumber(importPackage)

        manifest {
            attributes (
                    'Bundle-Name': "${bundleName}",
                    'Bundle-Description': "${bundleDescription}",
                    'Bundle-Vendor': "${bundleVendor}",
                    'Bundle-Version': "${version}",
                    'Bundle-SymbolicName': "${baseName}.fragment",
                    'Bundle-ManifestVersion': "${bundleManifestVersion}",
                    'Bundle-DocURL': "${bundleDocURL}",
                    'Fragment-Host': "${fragmentHost}",
                    'Export-Package': "${importPackage}"
            )
        }
    }
}
fragmentJar.dependsOn 'readManifesttAttributes'

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}
